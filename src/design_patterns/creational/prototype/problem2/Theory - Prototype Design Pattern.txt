

	Prototype 






  • Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes 


  • Prototype allows us to hide the complexity of making new instances from the client. 

    ► The concept is to copy an existing object rather than creating a new instance from scratch, something that may include costly operations. 




  • The existing object acts as a prototype and contains the state of the object. 

T   ►he newly copied object may change same properties only if required. 

    ► This approach saves costly resources and time, especially when object creation is a heavy process. 





○ Real-World Analogy 

  • In real life, prototypes are used for performing various tests before starting mass production of a product. 


  • However, in this case, prototypes don't participate in any actual production, playing a passive role instead. 





○ Structure


  • The Prototype interface declares the cloning methods. 

    ► In most cases, it's a single clone method. 



  • The Concrete Prototype class implements the cloning method. 

    ► In addition to copying the original object's data to the clone, this method may also handle some edge cases of the cloning process related to cloning linked objects, untangling recursive dependencies, etc 


  • The Client can produce a copy of any object that follows the prototype interface. 















