

	Decorator





Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors. 




 Example

  • Clothing that is put on or taken off a human, which can extend the human's behavior, but is not part of the human (the human object).




Structure 


  • The "Component Declares" the common interface for both wrap-pers and wrapped objects. 


  • "Concrete Component" is a class of objects being wrapped. It defines the basic behavior, which can be altered by decorators. 


  • The "Base Decorator" class has a field for referencing a wrapped object. 


  • "Concrete Decorators" define extra behaviors that can be added to components dynamically. 

     ♦ "Concrete Decorators" override methods of the base decorator and execute their behavior either before or after calling the parent method. 


  • The "Client" can wrap components in multiple layers of decorators, as long as it works with all objects via the component interface. 








