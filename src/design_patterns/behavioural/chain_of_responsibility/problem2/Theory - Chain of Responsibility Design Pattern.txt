

		Theory - Chain of Responsibility Design Pattern






  • Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain




○ ﻿Real World Example

  • Call center of an IT consulting company.

  	1- You request information: 
		→ HELLO, I NEED SOME TECH SUPPORT.

  	2- The robot provides you with options that do not match your need:
		→ PRESS 1, IF...

  	3- The operator tries to provide you with solutions, but he is not a specialist:
		→ HAVE YOU TRIED TURNING IT OFF AND ON AGAIN?

  	3- Finally, you are redirected to the specialist, who provides you with the correct solution:
		→ OK, HERE'S WHERE YOU CAN DOWNLOAD SOME DRIVERS.






○ ﻿Structure


  1- The Handler declares the interface, common for all concrete handlers.
 
    • It usually contains just a single method for handling requests, but sometimes it may also have another method for setting the next handler on the chain.



  2- The Base Handler is an optional class where you can put the boilerplate code that&#039;s common to all handler classes.


  3- Concrete Handlers contain the actual code for processing requests. Upon receiving a request, each handler must decide whether to process it and, additionally, whether to pass it along the chain.

    • Handlers are usually self-contained and immutable, accepting all necessary data just once via the constructor.



  4- The Client may compose chains just once or compose them dynamically, depending on the application&#039;s logic.









