

	Theory - Memento Design Pattern.txt





  • Memento is a behavioral design pattern that lets you save and restore the previous state of an object without revealing the details of its implementation.





○ Problem Example

  • Imagine that you're creating a text editor app. In addition to simple text editing, your editor can format text, insert inline images, etc.


  • At some point, you decided to let users undo any operations carried out on the text. This feature has become so common over the years that nowadays people expect every app to have it. For the implementation, you chose to take the direct approach.



○ Structure

  1- The Originator class can produce snapshots of its own state, as well as restore its state from snapshots when needed.


  2- The Memento is a value object that acts as a snapshot of the originator's state. It's a common practice to make the memento immutable and pass it the data only once, via the constructor.

  
  3- The Caretaker knows not only "when" and "why" to capture the originator's state, but also when the state should be restored.

    • A caretaker can keep track of the originator's history by storing a stack of mementos. When the originator has to travel back in history, the caretaker fetches the topmost memento from the stack and passes it to the originator's restoration method.












