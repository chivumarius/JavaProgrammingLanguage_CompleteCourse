

	Composite 






  ▬ Composite is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects. 






○ Example - Real-World Analogy 


  ▬ An example of a military structure: 
	• Divisions 
	• Brigades 
	• Platoons 
	• Squads 
	• Real soldiers 


  ▬ Composite Design Pattern 
	→ treats each Node in Two Ways: 

	1) Composite - Composite means it can have other objects below it. 
	2) leaf - leaf means it has no objects below it. 







○ Structure of Composite Design Pattern

 
  ▬ The "Component Interface" describes operations that are common to both simple and complex elements of the tree. 



  ▬ The "Leaf" is a basic element of a tree that doesn't have sub-elements. 

    ♦ Usually, leaf components end up doing most of the real work, since they don't have anyone to delegate the work to. 



  ▬ The "Container" is an element that has sub-elements: leaves or other containers. 

    ♦ A container doesn't know the concrete classes of its children. It works with all sub-elements only via the component interface. 



  ▬ Upon receiving a request, a container delegates the work to its sub-elements, processes intermediate results and then returns the final result to the client. 


  ▬ The "Client" works with all elements through the component interface. 

    ♦ As a result, the client can work in the same way with both simple or complex elements of the tree. 


